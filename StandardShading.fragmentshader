#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform int JustGreen;
uniform int togglelighting;
uniform float LightIntensity;




void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 100;


	// Material properties	
	vec3 MaterialDiffuseColor;
	vec3 MaterialAmbientColor;
	vec3 MaterialSpecularColor;

	// Green color only for the rectangle
	if(JustGreen == 1){
	MaterialDiffuseColor = vec3(0.0,1.0,0.0);	
	MaterialAmbientColor = vec3(1.0,1.0,1.0) * MaterialDiffuseColor;
	MaterialSpecularColor = vec3(0.3,0.3,0.3);}

	else if(JustGreen == 2){
	MaterialDiffuseColor = vec3(0.0,1.0,0.0);	
	MaterialAmbientColor = vec3(0.8,0.8,0.8) * MaterialDiffuseColor;
	MaterialSpecularColor = vec3(0.3,0.3,0.3);}

	else{
	MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;	
	MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	MaterialSpecularColor = vec3(0.3,0.3,0.3);


	
	}


	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
// Toggle lighting b/w ambient and all.	
	if(togglelighting == 1)
	{
		
	
	gl_FragColor.rgb = 
		
		MaterialAmbientColor +
		
		MaterialDiffuseColor * LightColor * LightPower * LightIntensity*cosTheta / 				(distance*distance) +
		
		MaterialSpecularColor * LightColor * LightPower *LightIntensity* pow(cosAlpha,5) / 				(distance*distance);
	}
	// Toggle green lighting for the rectangle.
	else if(togglelighting == 0 && JustGreen == 1)
	{

		MaterialAmbientColor = vec3(0.3,0.3,0.3)* MaterialDiffuseColor;
		gl_FragColor.rgb = MaterialAmbientColor;

	}
	else
	{	
		gl_FragColor.rgb = MaterialAmbientColor * LightIntensity;
	}


}
